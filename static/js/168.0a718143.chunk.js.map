{"version":3,"file":"static/js/168.0a718143.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.module.css","components/Reviews/Reviews.jsx","services/moviesAPI.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import Loader from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { moviesAPI } from 'services/moviesAPI';\nimport css from './Reviews.module.css';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    setIsLoading(true);\n\n    const fetchData = async () => {\n      try {\n        const { results } = await moviesAPI.getReviews(movieId, signal);\n\n        if (results.length === 0) {\n          setError(\"There aren't reviews for this movie yet. Try again later.\");\n          return;\n        }\n\n        setReviews(results);\n      } catch (error) {\n        if (error.name === 'AbortError') {\n          console.log('abort error');\n        } else {\n          console.log(error);\n          setError('Something went wrong... Please, try again later.');\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n\n    return () => controller.abort();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <div>{error}</div>}\n      {reviews.length !== 0 && (\n        <ul className={css['review-list']}>\n          {reviews.map(({ author, content, id, created_at }) => {\n            const date = new Date(created_at);\n            const formatedDate = date.toLocaleString();\n\n            return (\n              <li key={id} className={css.item}>\n                <h3>Author: {author}</h3>\n                <p>{content}</p>\n                <p className={css['review-date']}>{formatedDate}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","const API_KEY = '61a6b843c58046eb2a3a15bde4cbc7b9';\nconst imgBaseURL = 'https://image.tmdb.org/t/p/w500';\n\nconst fetchTrending = async signal => {\n  const fetchURL = `https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`;\n\n  const response = await fetch(fetchURL, { signal });\n\n  if (!response.ok) throw new Error(response.status);\n\n  const data = await response.json();\n  return data;\n};\n\nconst fetchMovieByQuery = async (query, signal) => {\n  const fetchURL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`;\n\n  const response = await fetch(fetchURL, { signal });\n\n  if (!response.ok) throw new Error(response.status);\n\n  const data = await response.json();\n  return data;\n};\n\nconst fetchMovieDetails = async (movieID, signal) => {\n  const fetchURL = `https://api.themoviedb.org/3/movie/${movieID}?api_key=${API_KEY}&language=en-US`;\n\n  const response = await fetch(fetchURL, { signal });\n\n  if (!response.ok) throw new Error(response.status);\n\n  const data = await response.json();\n  return data;\n};\n\nconst fetchMovieCast = async (movieID, signal) => {\n  const fetchURL = `https://api.themoviedb.org/3/movie/${movieID}/credits?api_key=${API_KEY}&language=en-US`;\n\n  const response = await fetch(fetchURL, { signal });\n\n  if (!response.ok) throw new Error(response.status);\n\n  const data = await response.json();\n  return data;\n};\n\nconst fetchMovieReviews = async (movieID, signal) => {\n  const fetchURL = `https://api.themoviedb.org/3/movie/${movieID}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n\n  const response = await fetch(fetchURL, { signal });\n\n  if (!response.ok) throw new Error(response.status);\n\n  const data = await response.json();\n  return data;\n};\n\nexport const moviesAPI = {\n  getTrending: fetchTrending,\n  getMovies: fetchMovieByQuery,\n  getDetails: fetchMovieDetails,\n  getCast: fetchMovieCast,\n  getReviews: fetchMovieReviews,\n  imgBaseURL,\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","useEffect","controller","AbortController","signal","fetchData","moviesAPI","results","length","name","console","log","abort","Loader","className","css","map","author","content","id","created_at","formatedDate","Date","toLocaleString","API_KEY","fetchTrending","fetchURL","fetch","response","ok","Error","status","json","data","fetchMovieByQuery","query","fetchMovieDetails","movieID","fetchMovieCast","fetchMovieReviews","getTrending","getMovies","getDetails","getCast","getReviews","imgBaseURL","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}